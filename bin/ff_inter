#!/usr/bin/env python3

# Copyright 2020 University of Groningen
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Main exe for computing interactions.
"""
import argparse
import pathlib
import numpy as np
import MDAnalysis as mda
import vermouth.forcefield
import sys
import fast_forward
from fast_forward.itp_to_ag import itp_to_ag
from fast_forward.itp_parser_sub import read_itp, guess_interactions
from collections import defaultdict
from fast_forward.bonded_file_parser import read_bonds
from fast_forward.virtual_site_calculator import vs_handler, mass_redistribution
from fast_forward.interaction_fit import interaction_fitter
from fast_forward.interactions_to_itp import itp_writer
from fast_forward.interaction_distribution import interaction_distribution
from fast_forward.interaction_plots import make_distribution_plot
from vermouth.file_writer import DeferredFileWriter

VERSION = 'fast_forward version {}'.format(fast_forward.__version__)

def __main__():
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter,)
    parser.add_argument('-f', type=str, dest="trajfile", help="trajectory file")
    parser.add_argument('-s', type=str, dest="tprfile", help="tpr file", default=None)
    parser.add_argument('-n', type=str, dest="ndx_file", help="index file")
    parser.add_argument('-pref', type=str, dest="prefix", help="common prefix to filename", default="")
    parser.add_argument('-i', type=str, dest="itp_files", help="itp file", nargs='*')
    parser.add_argument('-plots', default=False, action="store_true",
                        dest="plots", help="save the fits of bonded interactions")
    parser.add_argument('-plot-data', default=False, action="store_true",
                        dest="plot_data", help="save a pickle file containing the input data for the plots")
    parser.add_argument('-constraints', dest='constraint_convert', default=10000, type=int,
                        help="force constant above which to convert bonds to constraints")
    parser.add_argument('-precision', dest='precision', default=3, type=int,
                        help='precision of variables written to itp')

    args = parser.parse_args()

    # load trajectory
    if args.tprfile:
        u = mda.Universe(args.tprfile, args.trajfile, in_memory=True)
    else:
        u = mda.Universe(args.trajfile, in_memory=True)

    # if itp file is provided use it
    if args.itp_files:
        ff = vermouth.forcefield.ForceField("dummy")
        for file_handle in args.itp_files:
            with open(file_handle) as _file:
                lines = _file.readlines()
        read_itp(lines, ff)

        # loop over molecules
        for molname, block in ff.blocks.items():
            interactions_dict = defaultdict(dict)
            guess_interactions(block)
            interaction_groups = itp_to_ag(block, molname, u)
            for inter_type in ['bonds', 'angles', 'dihedrals']:
                for group_name, pair_idxs in interaction_groups[inter_type].items():
                    distr = interaction_distribution(u, inter_type, pair_idxs, group_name, args.prefix)

                    # fit the distributions for the interaction
                    value, sigma, fit_result = interaction_fitter(distr, inter_type, args.precision)

                    if args.plots:
                        make_distribution_plot(distr, fit_result, group_name, inter_type, args.plot_data)

                    # check bonds if they should become constraints
                    if (inter_type == "bonds") and sigma > args.constraint_convert:
                        interactions_dict["constraints"][group_name] = [value, sigma], pair_idxs
                    else:
                        interactions_dict[inter_type][group_name] = [value, sigma], pair_idxs

            itp_writer(molname, block, interactions_dict, command_used=' '.join(sys.argv))

    DeferredFileWriter().write()

__main__()
